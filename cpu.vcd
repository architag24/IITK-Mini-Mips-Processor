$date
	Thu Apr 17 16:20:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$scope module dut $end
$var wire 26 ! address [25:0] $end
$var wire 4 " alu_control [3:0] $end
$var wire 32 # alu_input_b [31:0] $end
$var wire 32 $ alu_result [31:0] $end
$var wire 1 % alu_src $end
$var wire 1 & branch $end
$var wire 1 ' clk $end
$var wire 6 ( funct [5:0] $end
$var wire 16 ) immediate [15:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 1 + jump $end
$var wire 32 , mem_data_out [31:0] $end
$var wire 1 - mem_read $end
$var wire 1 . mem_to_reg $end
$var wire 1 / mem_write $end
$var wire 6 0 opcode [5:0] $end
$var wire 32 1 pc_current [31:0] $end
$var wire 32 2 pc_next [31:0] $end
$var wire 5 3 rd [4:0] $end
$var wire 32 4 reg_data1 [31:0] $end
$var wire 32 5 reg_data2 [31:0] $end
$var wire 1 6 reg_dst $end
$var wire 1 7 reg_write $end
$var wire 1 8 reset $end
$var wire 5 9 rs [4:0] $end
$var wire 5 : rt [4:0] $end
$var wire 5 ; shamt [4:0] $end
$var wire 32 < write_data [31:0] $end
$var wire 5 = write_reg [4:0] $end
$var wire 1 > zero $end
$scope module pc_inst $end
$var wire 1 ' clk $end
$var wire 32 ? next_pc [31:0] $end
$var wire 1 8 reset $end
$var reg 32 @ curr_pc [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 A addr [31:0] $end
$var wire 32 B instruction [31:0] $end
$upscope $end
$scope module decode $end
$var wire 26 C address [25:0] $end
$var wire 6 D funct [5:0] $end
$var wire 16 E immediate [15:0] $end
$var wire 32 F instruction [31:0] $end
$var wire 6 G opcode [5:0] $end
$var wire 5 H rd [4:0] $end
$var wire 5 I rs [4:0] $end
$var wire 5 J rt [4:0] $end
$var wire 5 K shamt [4:0] $end
$upscope $end
$scope module control_unit $end
$var wire 6 L funct [5:0] $end
$var wire 6 M opcode [5:0] $end
$var reg 4 N alu_control [3:0] $end
$var reg 1 O alu_src $end
$var reg 1 P branch $end
$var reg 1 Q jump $end
$var reg 1 R mem_read $end
$var reg 1 S mem_to_reg $end
$var reg 1 T mem_write $end
$var reg 1 U reg_dst $end
$var reg 1 V reg_write $end
$upscope $end
$scope module reg_file $end
$var wire 1 ' clk $end
$var wire 5 W rd [4:0] $end
$var wire 32 X read_data1 [31:0] $end
$var wire 32 Y read_data2 [31:0] $end
$var wire 1 7 reg_write $end
$var wire 1 8 reset $end
$var wire 5 Z rs [4:0] $end
$var wire 5 [ rt [4:0] $end
$var wire 32 \ write_data [31:0] $end
$var integer 32 ] i [31:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 32 ^ a [31:0] $end
$var wire 32 _ a_signed [31:0] $end
$var wire 4 ` alu_control [3:0] $end
$var wire 32 a b [31:0] $end
$var wire 32 b b_signed [31:0] $end
$var wire 5 c shamt [4:0] $end
$var wire 1 > zero $end
$var reg 32 d result [31:0] $end
$upscope $end
$scope module dmem $end
$var wire 32 e addr [31:0] $end
$var wire 1 ' clk $end
$var wire 1 - mem_read $end
$var wire 1 / mem_write $end
$var wire 10 f word_addr [9:0] $end
$var wire 32 g write_data [31:0] $end
$var reg 32 h read_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 h
b0 g
b1 f
b101 e
b101 d
b0 c
b101 b
b101 a
b10 `
b0 _
b0 ^
b100000 ]
b101 \
b1000 [
b0 Z
b0 Y
b0 X
b1000 W
1V
0U
0T
0S
0R
0Q
0P
1O
b10 N
b1000 M
b101 L
b0 K
b1000 J
b0 I
b0 H
b1000 G
b100000000010000000000000000101 F
b101 E
b101 D
b10000000000000000101 C
b100000000010000000000000000101 B
b0 A
b0 @
b100 ?
0>
b1000 =
b101 <
b0 ;
b1000 :
b0 9
18
17
06
b0 5
b0 4
b0 3
b100 2
b0 1
b1000 0
0/
0.
0-
b0 ,
0+
b100000000010000000000000000101 *
b101 )
b101 (
0'
0&
1%
b101 $
b101 #
b10 "
b10000000000000000101 !
$end
#5000
b101 5
b101 Y
b101 g
1'
#10000
0'
08
#15000
b10 f
b1010 d
b1010 $
b1010 e
b1010 <
b1010 \
b0 5
b0 Y
b0 g
b1001 =
b1001 W
b10 N
b10 "
b10 `
1V
17
1O
1%
b1010 b
b1010 #
b1010 a
b1001 :
b1001 J
b1001 [
b1010 (
b1010 D
b1010 L
b1010 )
b1010 E
b10010000000000001010 !
b10010000000000001010 C
b100000000010010000000000001010 *
b100000000010010000000000001010 B
b100000000010010000000000001010 F
b1000 2
b1000 ?
b100 @
b100 1
b100 A
1'
#20000
0'
#25000
b11 f
b1010 =
b1010 W
b1111 d
b1111 $
b1111 e
b1111 <
b1111 \
b101 _
b101 4
b101 X
b101 ^
1U
16
b10 N
b10 "
b10 `
1V
17
0O
0%
b1010 b
b1010 #
b1010 a
b0 0
b0 G
b0 M
b1000 9
b1000 I
b1000 Z
b1010 3
b1010 H
b100000 (
b100000 D
b100000 L
b101000000100000 )
b101000000100000 E
b1000010010101000000100000 !
b1000010010101000000100000 C
b1010 5
b1010 Y
b1010 g
b1000010010101000000100000 *
b1000010010101000000100000 B
b1000010010101000000100000 F
b1100 2
b1100 ?
b1000 @
b1000 1
b1000 A
1'
#30000
0'
#35000
1>
b0 f
b0 b
b0 #
b0 a
b0 d
b0 $
b0 e
b0 <
b0 \
b0 _
b0 4
b0 X
b0 ^
b1111 5
b1111 Y
b1111 g
1T
1/
1O
1%
b10 N
b10 "
b10 `
0V
07
0U
06
b101011 0
b101011 G
b101011 M
b0 9
b0 I
b0 Z
b1010 :
b1010 J
b1010 [
b0 3
b0 H
b0 (
b0 D
b0 L
b0 )
b0 E
b10100000000000000000 !
b10100000000000000000 C
b10101100000010100000000000000000 *
b10101100000010100000000000000000 B
b10101100000010100000000000000000 F
b10000 2
b10000 ?
b1100 @
b1100 1
b1100 A
1'
#40000
0'
#45000
b0xxxx <
b0xxxx \
b1111 h
b1111 ,
1R
1-
1V
17
1S
1.
b10 N
b10 "
b10 `
0T
0/
1O
1%
b0 5
b0 Y
b0 g
b1011 =
b1011 W
b100011 0
b100011 G
b100011 M
b1011 :
b1011 J
b1011 [
b10110000000000000000 !
b10110000000000000000 C
b10001100000010110000000000000000 *
b10001100000010110000000000000000 B
b10001100000010110000000000000000 F
b10100 2
b10100 ?
b10000 @
b10000 1
b10000 A
1'
#50000
0'
#55000
bx f
bx d
x>
bx $
bx e
b0 h
b0 ,
bx <
bx \
bx _
bx 4
bx X
bx ^
bx =
bx W
b0 N
b0 "
b0 `
0R
0-
0V
07
0S
0.
0O
0%
bx b
bx #
bx a
bx 0
bx G
bx M
bx 9
bx I
bx Z
bx :
bx J
bx [
bx 3
bx H
bx ;
bx K
bx c
bx (
bx D
bx L
bx )
bx E
bx !
bx C
bx 5
bx Y
bx g
bx *
bx B
bx F
b11000 2
b11000 ?
b10100 @
b10100 1
b10100 A
1'
#60000
0'
#65000
b11100 2
b11100 ?
b11000 @
b11000 1
b11000 A
1'
#70000
0'
#75000
b100000 2
b100000 ?
b11100 @
b11100 1
b11100 A
1'
#80000
0'
#85000
b100100 2
b100100 ?
b100000 @
b100000 1
b100000 A
1'
#90000
0'
#95000
b101000 2
b101000 ?
b100100 @
b100100 1
b100100 A
1'
#100000
0'
#105000
b101100 2
b101100 ?
b101000 @
b101000 1
b101000 A
1'
#110000
0'
#115000
b110000 2
b110000 ?
b101100 @
b101100 1
b101100 A
1'
#120000
0'
#125000
b110100 2
b110100 ?
b110000 @
b110000 1
b110000 A
1'
#130000
0'
#135000
b111000 2
b111000 ?
b110100 @
b110100 1
b110100 A
1'
#140000
0'
#145000
b111100 2
b111100 ?
b111000 @
b111000 1
b111000 A
1'
#150000
0'
#155000
b1000000 2
b1000000 ?
b111100 @
b111100 1
b111100 A
1'
#160000
0'
#165000
b1000100 2
b1000100 ?
b1000000 @
b1000000 1
b1000000 A
1'
#170000
0'
#175000
b1001000 2
b1001000 ?
b1000100 @
b1000100 1
b1000100 A
1'
#180000
0'
#185000
b1001100 2
b1001100 ?
b1001000 @
b1001000 1
b1001000 A
1'
#190000
0'
#195000
b1010000 2
b1010000 ?
b1001100 @
b1001100 1
b1001100 A
1'
#200000
0'
#205000
b1010100 2
b1010100 ?
b1010000 @
b1010000 1
b1010000 A
1'
#210000
0'
#215000
b1011000 2
b1011000 ?
b1010100 @
b1010100 1
b1010100 A
1'
#220000
0'
#225000
b1011100 2
b1011100 ?
b1011000 @
b1011000 1
b1011000 A
1'
#230000
0'
#235000
b1100000 2
b1100000 ?
b1011100 @
b1011100 1
b1011100 A
1'
#240000
0'
#245000
b1100100 2
b1100100 ?
b1100000 @
b1100000 1
b1100000 A
1'
#250000
0'
#255000
b1101000 2
b1101000 ?
b1100100 @
b1100100 1
b1100100 A
1'
#260000
0'
#265000
b1101100 2
b1101100 ?
b1101000 @
b1101000 1
b1101000 A
1'
#270000
0'
#275000
b1110000 2
b1110000 ?
b1101100 @
b1101100 1
b1101100 A
1'
#280000
0'
#285000
b1110100 2
b1110100 ?
b1110000 @
b1110000 1
b1110000 A
1'
#290000
0'
#295000
b1111000 2
b1111000 ?
b1110100 @
b1110100 1
b1110100 A
1'
#300000
0'
#305000
b1111100 2
b1111100 ?
b1111000 @
b1111000 1
b1111000 A
1'
#310000
0'
#315000
b10000000 2
b10000000 ?
b1111100 @
b1111100 1
b1111100 A
1'
#320000
0'
#325000
b10000100 2
b10000100 ?
b10000000 @
b10000000 1
b10000000 A
1'
#330000
0'
#335000
b10001000 2
b10001000 ?
b10000100 @
b10000100 1
b10000100 A
1'
#340000
0'
#345000
b10001100 2
b10001100 ?
b10001000 @
b10001000 1
b10001000 A
1'
#350000
0'
#355000
b10010000 2
b10010000 ?
b10001100 @
b10001100 1
b10001100 A
1'
#360000
0'
#365000
b10010100 2
b10010100 ?
b10010000 @
b10010000 1
b10010000 A
1'
#370000
0'
#375000
b10011000 2
b10011000 ?
b10010100 @
b10010100 1
b10010100 A
1'
#380000
0'
#385000
b10011100 2
b10011100 ?
b10011000 @
b10011000 1
b10011000 A
1'
#390000
0'
#395000
b10100000 2
b10100000 ?
b10011100 @
b10011100 1
b10011100 A
1'
#400000
0'
#405000
b10100100 2
b10100100 ?
b10100000 @
b10100000 1
b10100000 A
1'
#410000
0'
#415000
b10101000 2
b10101000 ?
b10100100 @
b10100100 1
b10100100 A
1'
#420000
0'
#425000
b10101100 2
b10101100 ?
b10101000 @
b10101000 1
b10101000 A
1'
#430000
0'
#435000
b10110000 2
b10110000 ?
b10101100 @
b10101100 1
b10101100 A
1'
#440000
0'
#445000
b10110100 2
b10110100 ?
b10110000 @
b10110000 1
b10110000 A
1'
#450000
0'
#455000
b10111000 2
b10111000 ?
b10110100 @
b10110100 1
b10110100 A
1'
#460000
0'
#465000
b10111100 2
b10111100 ?
b10111000 @
b10111000 1
b10111000 A
1'
#470000
0'
#475000
b11000000 2
b11000000 ?
b10111100 @
b10111100 1
b10111100 A
1'
#480000
0'
#485000
b11000100 2
b11000100 ?
b11000000 @
b11000000 1
b11000000 A
1'
#490000
0'
#495000
b11001000 2
b11001000 ?
b11000100 @
b11000100 1
b11000100 A
1'
#500000
0'
#505000
b11001100 2
b11001100 ?
b11001000 @
b11001000 1
b11001000 A
1'
#510000
0'
